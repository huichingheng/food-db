{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Food Trail DB"
  },
  "servers": [
    {
      "url": "https://kod2nd-food-db.herokuapp.com/"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "paths": {
    "/api-help": {
      "get": {
        "summary": "API documentation",
        "tags": [
          "API Help Page"
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          }
        }
      }
    },
    "/locations": {
      "get": {
        "summary": "Shows a list of stored food locations",
        "tags": [
          "Locations"
        ],
        "security": [],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Filters food locations that contain the supplied query name.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "5b4ff7d4c0a3f22f040ab498",
                    "name": "Example Food Place",
                    "lat": 101.1248,
                    "lng": 23.231,
                    "__v": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "summary": "Create a location",
        "tags": [
          "Locations"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User must have administrative rights. Creates a location if provided with a lat and lng. Optional fields are name, address and rating",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "name": "optional",
                  "lat": "101.3152",
                  "lng": "1.08324",
                  "rating": "optional"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Creation",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Created food location NEW_FOOD_LOCATION_NAME"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },
          "500": {
            "description": "ERROR - error message"
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "summary": "Shows a single food location",
        "tags": [
          "Locations"
        ],
        "security": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Displayes a single food location based on its id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "5b4ff7d4c0a3f22f040ab498",
                    "name": "Example Food Place",
                    "lat": 101.1248,
                    "lng": 23.231,
                    "__v": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "Invalid request!"
          }
        }
      },
      "put": {
        "summary": "Updates details of a stored location",
        "tags": [
          "Locations"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Update the details of the location of the specified ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User must have administrative rights. Updates details of the specified location based on the key-value pairs passed in the request body.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "name": "updated name"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated!"
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Invalid request!"
          }
        }
      },
      "delete": {
        "summary": "Deletes a single food location",
        "tags": [
          "Locations"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User must have administrative rights. Deletes a single food location based on the specified ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Delete"
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Invalid request!"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Shows a list of stored users",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "User must have administrative rights. Displays a list of users.",
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "5b4ff766c0a3f22f040bb497",
                    "name": "John Doe",
                    "age": 18,
                    "locations": [
                      "loc1",
                      "loc2"
                    ],
                    "salt": "abc123def456",
                    "hash": "xysadoj414jfa10jf10gbni20va",
                    "createdAt": "2018-07-19T02:28:55.911Z",
                    "updatedAt": "2018-07-19T02:28:55.911Z",
                    "__v": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Bad request"
          }
        }
      }
    },
    "/users/signup": {
      "post": {
        "summary": "User Sign up",
        "tags": [
          "Users"
        ],
        "security": [],
        "description": "Request body should have username and password key-value pairs.",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "404": {
            "description": "Invalid request"
          }          
        }
      }
    },
    "/users/signin": {
      "post": {
        "summary": "User Sign in",
        "tags": [
          "Users"
        ],
        "security": [],
        "description": "Request body should have username and password key-value pairs. Bearer auth token will be returned",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "404": {
            "description": "Invalid request"
          }          
        }
      }
    },      
    "/users/{id}": {
      "get": {
        "summary": "Shows details of a single user",
        "tags": [
          "Users"
        ],
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User must be logged in or have administrative rights to access. Displays a user based on the user id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "_id": "5b4ff766c0a3f22f040bb497",
                    "name": "John Doe",
                    "age": 18,
                    "locations": [
                      "loc1",
                      "loc2"
                    ],
                    "salt": "abc123def456",
                    "hash": "xysadoj414jfa10jf10gbni20va",
                    "createdAt": "2018-07-19T02:28:55.911Z",
                    "updatedAt": "2018-07-19T02:28:55.911Z",
                    "__v": 0
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Invalid request!"
          }
        }
      },
      "put": {
        "summary": "Updates details of a single user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User must be logged in or have administrative rights to access. Updates details based on the key-value pairs passed in the request body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User must be logged in or have administrative rights to access. Updates details based on the key-value pairs passed in the request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "name": "updated name",
                  "age": 37
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user!"
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Invalid request!"
          }
        }
      },
      "delete": {
        "summary": "Deletes a single user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User must be logged in or have administrative rights to access. Deletes a single food location based on the specified ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Delete"
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Invalid request!"
          }
        }
      }
    },
    "/users/{id}/locations": {
      "get": {
        "summary": "Displays the details of the locations a user has saved",
        "tags": [
          "Users"
        ],
        "security": [{"BearerAuth": []}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User must be logged in or have administrative rights to access. Displays locations of a user based on the id input",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "example": 
                    [
                      "loc1",
                      "loc2",
                      "loc3"
                    ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised"
          },          
          "500": {
            "description": "ERROR! - error message"
          }
        }
      },
      "post": {
        "summary": "Posts a location to the user locations arrary",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User must be logged in or have administrative rights to access. Adds a single food location's id to the user locations array based on the specified lat and lng key-value pairs specified in the request body. If a location does not exist in the Food Locations Database, the posted location will be added to the Food Locations Database. However, if the location already exists in the Food Locations database, the location's ID will be appended to the user's location array but the location will not be stored in the Food Locations Database. ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful create"
          },
          "401": {
            "description": "Unauthorised"
          },          
          "500": {
            "description": "ERROR! - error message"
          }
        }
      }
    },
    "/users/{id}/locations/{locationid}": {
      "delete": {
        "summary": "Deletes a single user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "User must be logged in or have administrative rights to access. Removes a single location from the user Array based on the specified location ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationid",
            "in": "path",
            "required": true,
            "description": "Location ID",
            "schema": {
              "type": "string"
            }
          }          
        ],
        "responses": {
          "200": {
            "description": "Successful Delete"
          },
          "401": {
            "description": "Unauthorised"
          },          
          "404": {
            "description": "Invalid request!"
          }
        }
      }
    }
  }
}